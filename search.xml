<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/2019-12-28-16107.html</url>
    <content><![CDATA[<p>基于Hexo编写的轻巧简洁小清新博客。</p>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>install</tag>
        <tag>nodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>python form-data post上传数据简便方法</title>
    <url>/posts/2019-12-24-54485.html</url>
    <content><![CDATA[<p>有时要用到 form-data 这种形式post 上传文件到服务器，下面介绍使用python 实现的简便方法。</p>
<a id="more"></a>
<p><img src="/images/posts/python-formdata-post.jpg" alt="python-formdata-post"></p>
<h2 id="方法一，使用-urllib2-自己打包"><a href="#方法一，使用-urllib2-自己打包" class="headerlink" title="方法一，使用 urllib2 自己打包"></a>方法一，使用 urllib2 自己打包</h2><p>自己封装form-data 也很方便</p>
<pre><code>def test():
    #boundary只要是随机不同的就行
    boundary = &#39;----------%s&#39; % hex(int(time.time() * 1000))
    data = []
    data.append(&#39;--%s&#39; % boundary)

    fr=open(r&#39;test2.jpg&#39;,&#39;rb&#39;)
    data.append(&#39;Content-Disposition: form-data; name=&quot;%s&quot;; filename=&quot;new_test2.jpg&quot;&#39; % &#39;file&#39;)
    data.append(&#39;Content-Type: %s\r\n&#39; % &#39;image/jpeg&#39;)
    data.append(fr.read())
    fr.close()
    data.append(&#39;--%s--\r\n&#39; % boundary)

    #http_url=&#39;http://remotserver.com/page.php&#39;
    http_url = &#39;http://xxx/v1/upload&#39;
    http_body=&#39;\r\n&#39;.join(data)
    try:
        #buld http request
        req=urllib2.Request(http_url, data=http_body)
        #header
        req.add_header(&#39;Content-Type&#39;, &#39;multipart/form-data; boundary=%s&#39; % boundary)#最重要的一行

        #post data to server
        resp = urllib2.urlopen(req, timeout=5)
        #get response
        qrcont=resp.read()
        print qrcont
    except Exception,e:
        print &#39;http error&#39;</code></pre><h2 id="方法二，使用request"><a href="#方法二，使用request" class="headerlink" title="方法二，使用request"></a>方法二，使用request</h2><p>更简洁</p>
<pre><code>import requests
url = &#39;xxx&#39;
files={&#39;file&#39;:(&#39;newname.jpg&#39;,open(&#39;localname.jpg&#39;,&#39;rb&#39;),&#39;image/jpeg&#39;)}
rsp=requests.post(url,files=files)
print(rsp.request.text)</code></pre>]]></content>
      <tags>
        <tag>python</tag>
        <tag>form</tag>
        <tag>data</tag>
        <tag>post</tag>
        <tag>上传</tag>
      </tags>
  </entry>
  <entry>
    <title>用SSH 密钥登录VPS</title>
    <url>/posts/2019-12-24-16726.html</url>
    <content><![CDATA[<p>以前没有在VPS 上部署重要的东西，设置一个稍复杂的密码就可以。下面对记录一下VPS 禁止用户名+密码登录，仅使用密钥登录的过程。</p>
<a id="more"></a>
<p><img src="/images/posts/SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95VPS.jpg" alt="SSH密钥登录VPS"></p>
<h2 id="生成SSH-公钥"><a href="#生成SSH-公钥" class="headerlink" title="生成SSH 公钥"></a>生成SSH 公钥</h2><p>确认是否已经有一个公钥，即检查<code>.ssh</code>文件夹，以及文件夹中是否存在<code>id_rsa</code> 和 <code>id_rsa.pub</code>文件，有.pub后缀的文件就是公钥，另一个文件则是密钥。如果不存在，或者干脆连<code>.ssh</code>文件夹都没有，可以进行创建。如果存在，就直接把<code>id_rsa.pub</code>内容输出，粘贴的服务器的相关文件。</p>
<pre><code>$ cd ~/.ssh
$ ls</code></pre><p>可以用<code>ssh-keygen</code>来创建<br>默认公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>
<h2 id="更改VPS-sshd-配置"><a href="#更改VPS-sshd-配置" class="headerlink" title="更改VPS sshd 配置"></a>更改VPS sshd 配置</h2><p>编辑sshd 配置文件 <code>/etc/ssh/sshd_config</code><br>找到并修改为下面的样子：</p>
<pre><code>RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile      %h/.ssh/authorized_keys

PasswordAuthentication no</code></pre><h3 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h3><p>打开文件<code>~/.ssh/authorized_keys</code>， 把本地的<code>id_rsa.pub</code> 内容粘贴到里面，保存退出</p>
<h3 id="重启sshd-服务"><a href="#重启sshd-服务" class="headerlink" title="重启sshd 服务"></a>重启sshd 服务</h3><pre><code>service sshd restart</code></pre><h2 id="其它安全措施"><a href="#其它安全措施" class="headerlink" title="其它安全措施"></a>其它安全措施</h2><p>上面所说的登录方式只是最基本的安全措施，还有比如更改ssh 默认端口、禁止root用户登录、使用denyhosts、启用iptables限制等等。</p>
<p>查看尝试暴力破解机器密码的人</p>
<pre><code>grep &quot;Failed password for root&quot; /var/log/auth.log | awk &#39;{print $11}&#39; | sort | uniq -c | sort -nr | more</code></pre><h2 id="查看成功登录信息"><a href="#查看成功登录信息" class="headerlink" title="查看成功登录信息"></a>查看成功登录信息</h2><pre><code>查看当前登录用户信息
who命令：
who缺省输出包括用户名、终端类型、登陆日期以及远程主机。
who /var/log/wtmp

last

last 用户名

last -t 20181206160404
显示这个时间戳之前的登陆历史</code></pre><h2 id="客户端密钥备份"><a href="#客户端密钥备份" class="headerlink" title="客户端密钥备份"></a>客户端密钥备份</h2><p>如果电脑重装了，就很难登录服务器，可以备份密钥，直接复制<code>id_rsa</code>、<code>id_rsa.pub</code>两个文件。当电脑重装或者想在其他电脑上登录主机，直接把这两个文件复制到 <code>~/.ssh/</code> 目录下就行。<br>如果使用备份的<code>id_rsa</code> 文件出现下面的错误提示</p>
<pre><code>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for &#39;id_rsa&#39; are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.</code></pre><p>可以用更改文件属性的方法来解决</p>
<pre><code>chmod 0600 id_rsa</code></pre>]]></content>
      <tags>
        <tag>VPS</tag>
        <tag>SSH</tag>
        <tag>密钥</tag>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL 生成自签名证书备忘</title>
    <url>/posts/2019-12-24-63828.html</url>
    <content><![CDATA[<p>用 OpenSSL 生成自签名证书的步骤：</p>
<a id="more"></a>
<p><img src="/images/posts/OpenSSL.jpg" alt="OpenSSL"></p>
<ul>
<li>创建Key； </li>
<li>创建签名请求；</li>
<li>将Key的口令移除；</li>
<li>用Key签名证书。<br>为HTTPS准备的证书需要注意，创建的签名请求的CN必须与域名完全一致，否则无法通过浏览器验证。<br>具体命令如下，把域名改为自己的域名：<pre><code>openssl genrsa -des3 -out $DOMAIN.key 1024
openssl req -new -subj &quot;/C=US/ST=Mars/L=iTranswarp/O=iTranswarp/OU=iTranswarp/CN=$DOMAIN&quot; -key $DOMAIN.key -out $DOMAIN.csr
mv $DOMAIN.key $DOMAIN.origin.key
openssl rsa -in $DOMAIN.origin.key -out $DOMAIN.key
openssl x509 -req -days 3650 -in $DOMAIN.csr -signkey $DOMAIN.key -out $DOMAIN.crt</code></pre>有时需要下面两个文件名更加方便识别：<pre><code>cp $DOMAIN.crt cert.pem
cp $DOMAIN.key key.pem</code></pre>nginx 配置：<pre><code>ssl_certificate     $DOMAIN.crt;
ssl_certificate_key $DOMAIN.key;</code></pre></li>
</ul>
]]></content>
      <tags>
        <tag>OpenSSL</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac pip2 与 pip3 共存</title>
    <url>/posts/2019-12-24-6349.html</url>
    <content><![CDATA[<p>Mac 上的 pip2 与 pip3 共存笔记</p>
<a id="more"></a>
<p><img src="/images/posts/pip2-pip3.jpg" alt="pip2-pip3"><br>这里不想启用<code>pyenv</code><br>下载 <code>get-pip.py</code></p>
<pre><code>curl -O https://bootstrap.pypa.io/get-pip.py</code></pre><p>首先安装pip （pip2）</p>
<pre><code>sudo python2 get-pip.py</code></pre><p>再安装 <code>pip3</code></p>
<pre><code>sudo python3 get-pip.py</code></pre><p>测试：</p>
<pre><code>$ pip -V
pip 18.1 from /Library/Python/2.7/site-packages/pip-18.1-py2.7.egg/pip (python 2.7)
$ pip2 -V
pip 18.1 from /Library/Python/2.7/site-packages/pip-18.1-py2.7.egg/pip (python 2.7)
$ pip3 -V
pip 18.1 from /usr/local/lib/python3.6/site-packages/pip (python 3.6)</code></pre><p>如果失败就动用 <code>easy_install</code> 来安装：</p>
<pre><code>sudo easy_install pip</code></pre>]]></content>
      <tags>
        <tag>Mac</tag>
        <tag>pip2</tag>
        <tag>pip3</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWrt 国内源</title>
    <url>/posts/2019-12-24-11985.html</url>
    <content><![CDATA[<p>国内可用 OpenWrt 镜像</p>
<a id="more"></a>
<ul>
<li><a href="https://mirrors.ustc.edu.cn/lede/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/lede/</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/openwrt/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/openwrt/</a> 只更新到 chaos_calmer/15.05.1/</li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/lede/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/lede/</a> openwrt 最新版</li>
</ul>
<p>官方网站推荐的其他镜像</p>
<ul>
<li><a href="https://openwrt.org/downloads#mirrors" target="_blank" rel="noopener">https://openwrt.org/downloads#mirrors</a></li>
</ul>
<p>修改文件 <code>/etc/opkg/distfeeds.conf</code><br><img src="/images/posts/OpenWrt.png" alt="OpenWrt"></p>
]]></content>
      <tags>
        <tag>OpenWrt</tag>
        <tag>国内</tag>
      </tags>
  </entry>
  <entry>
    <title>开启BBR 加速小VPS访问速度</title>
    <url>/posts/2019-12-24-27787.html</url>
    <content><![CDATA[<p>TCP BBR 是 Google 开发的新的拥塞控制算法，据说是用在 YouTube 上，后来开源并且已经集成到 Linux 4.9-rc8 之后版本的内核中。它可以极大提高网络速度，大大降低延迟。</p>
<a id="more"></a>
<p>加速效果如下图所示：<br><img src="/images/posts/open-BBR.gif" alt="open-BBR"><br>如果你的 VPS 使用的是 OpenVZ 的虚拟技术，你是不能使用 BBR 的。并且系统要求在 CentOS 6+，Debian 7+，Ubuntu 12+。<br>对于4.9+的内核，默认编译了 TCP BBR 的内容，可以直接通过参数开启<br>uname -r 看看是不是内核 &gt;= 4.9<br>执行 <code>lsmod | grep bbr</code> ，如果结果中没有 <code>tcp_bbr</code> 的话就先执行</p>
<pre><code>modprobe tcp_bbr
echo &quot;tcp_bbr&quot; &gt;&gt; /etc/modules-load.d/modules.conf</code></pre><p>执行</p>
<pre><code>echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</code></pre><p>保存生效</p>
<pre><code>sysctl -p</code></pre><p>执行</p>
<pre><code>sysctl net.ipv4.tcp_available_congestion_control
sysctl net.ipv4.tcp_congestion_control</code></pre><p>如果结果都有bbr, 则证明你的内核已开启bbr</p>
<p>看到有 tcp_bbr 模块即说明bbr已启动</p>
<p>再实行 <code>lsmod | grep bbr</code>，显示以下即启动成功：</p>
<pre><code>lsmod | grep bbr
tcp_bbr                20480  14</code></pre>]]></content>
      <tags>
        <tag>BBR</tag>
        <tag>开启</tag>
        <tag>访问速度</tag>
        <tag>VPS</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>Openwrt 路由上开启BBR</title>
    <url>/posts/2019-12-24-46437.html</url>
    <content><![CDATA[<p>BBR 是一种协议算法，在 Openwrt 路由上启用 BBR 还是有一定作用的。 Openwrt 18.* 后都自带模块 <code>kmod-tcp-bbr</code> 安装就可以。</p>
<a id="more"></a>
<p><img src="/images/posts/Openwrt-BBR.jpg" alt="Openwrt-BBR"><br>看内核版本</p>
<pre><code>root@OpenWrt:~# uname -r
4.9.184</code></pre><p>安装 <code>kmod-tcp-bbr</code></p>
<pre><code>opkg update
opkg install kmod-tcp-bbr</code></pre><p>会安装相关的 ipk</p>
<pre><code>Configuring kmod-sched-core.
Configuring kmod-sched.
Configuring kmod-tcp-bbr.</code></pre><p>查看相关情况</p>
<pre><code>root@OpenWrt:~# sysctl net.ipv4.tcp_congestion_control
net.ipv4.tcp_congestion_control = cubic
root@OpenWrt:~# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = cubic reno bbr
root@OpenWrt:~# sysctl net.core.default_qdisc
net.core.default_qdisc = fq_codel
root@OpenWrt:~# lsmod | grep bbr
tcp_bbr                 4832  0
root@OpenWrt:~# cat /etc/sysctl.conf
# Defaults are configured in /etc/sysctl.d/* and can be customized in this file
root@OpenWrt:~# ls -l /etc/sysctl.d/
-rw-r--r--    1 root     root           675 Jun 27 12:18 10-default.conf
-rw-r--r--    1 root     root           379 Jun 27 12:18 11-nf-conntrack.conf
-rw-r--r--    1 root     root           184 Jun 27 12:18 12-tcp-bbr.conf
root@OpenWrt:~# cat /etc/sysctl.d/12-tcp-bbr.conf
# Do not edit, changes to this file will be lost on upgrades
# /etc/sysctl.conf can be used to customize sysctl settings

net.ipv4.tcp_congestion_control=bbr
net.core.default_qdisc=fq
root@OpenWrt:~# sysctl -p
root@OpenWrt:~# lsmod | grep bbr
tcp_bbr                 4832  0</code></pre><p>还没生效，重启路由后再看看</p>
<pre><code>root@OpenWrt:~# lsmod | grep bbr
tcp_bbr                 4832 21
root@OpenWrt:~# sysctl net.ipv4.tcp_congestion_control
net.ipv4.tcp_congestion_control = bbr</code></pre><p>BBR 加速生效了！</p>
]]></content>
      <tags>
        <tag>OpenWrt</tag>
        <tag>BBR</tag>
        <tag>路由</tag>
        <tag>开启</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 与中文输入法</title>
    <url>/posts/2019-12-21-21047.html</url>
    <content><![CDATA[<p>我最后还是放弃把 Vim 作为主要编辑器来输入中文了，整体使用下来 mental model 的 cost 太重了。<a id="more"></a>记笔记时用用中文呀或者改改博客时偶尔用一下还<br>蛮去，这个时候这个功能至少能帮助你 Esc 之后不煞笔，所以也不算完全没有价值吧……</p>
<hr>
<p>我相信很多中文世界的 Vimer 都遇到过这个烦恼，在 vim 的 insert 模式时可能突然想输个中文，输完之后会本能的直接 <code>esc</code> 接 normal 模式操作，结果发现<br>跳出来的是中文输入法……对于 vscode，我一般会在几次错误之后被逼到退出 vscode vim 模式，而对于终端中用的 neovim，就只能尽量不输入中文了。</p>
<p>为了满足我 1% 用 vim 输入中文的场景（比如写博客），我还是想看看有没有什么解决方案，Google 出来的解决方案基本是：<em>在退出 insert 模式时记住当时的<br>输入法，并自动切换到默认输入法（一般是英文）给 normal 模式用，并且在下一次进入 insert 模式时再切换回来。</em></p>
<p>原生 vim 的话，可以使用 <a href="https://github.com/ybian/smartim" target="_blank" rel="noopener">smartim</a> 插件，原理是调用 <a href="https://github.com/daipeihust/im-select" target="_blank" rel="noopener">im-select</a> 这个 CLI 工具来切换输入法。</p>
<p>对于 VSCode-vim 的话，smartim 的移植也在近期的 PR 中被 merge 到了插件里，<a href="https://github.com/VSCodeVim/Vim#use-im-select" target="_blank" rel="noopener">详情见文档的这部分配置</a>，需要指定一下默认输入法和 im-select 的 binary 路径就好。</p>
<hr>
<p>不过实话说，在 vim 中编辑中文的效率和体验和英文比都是大打折扣的。因为中文分词难度太高，不像英文可以简单依靠一个 <code>split &quot; &quot;</code> 搞定。所以其实无论 vim（<code>w</code>ord，<code>b</code>egin，<code>e</code>nd），emacs 还是操作系统自带的（比如 macOS 中的 <code>alt + 箭头</code>） 「按词移动」功能对于中文都仅仅是跳转到下一个空格处而已&gt;，对于中文来说基本就是下一句了……其他常用操作诸如 <code>f</code>，<code>/</code>, <code>r</code>eplace, <code>t</code>ill 也都无法很好的工作，基本只能靠 <code>hjkl</code> 爬行……</p>
<p>不过也算聊胜于无吧，由于我的主力外置键盘是 HHKB，能用 vim 操作的一个子集（<code>hjkl</code>, <code>o</code>, <code>A</code>, <code>I</code>, <code>v</code> etc.）可能也比按住 <code>Fn</code> 的方向键好用……</p>
]]></content>
      <tags>
        <tag>Vim</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown插入图片、视频和公式</title>
    <url>/posts/2019-12-20-33346.html</url>
    <content><![CDATA[<p>记录一些常用的Markdown插入图片和视频方法</p>
<a id="more"></a>
<h2 id="1-Markdown-插入图片的几种方法"><a href="#1-Markdown-插入图片的几种方法" class="headerlink" title="1. Markdown 插入图片的几种方法"></a>1. Markdown 插入图片的几种方法</h2><h3 id="1-1-原-markdown-语法"><a href="#1-1-原-markdown-语法" class="headerlink" title="1.1 原 markdown 语法"></a>1.1 原 markdown 语法</h3><pre><code class="markdown">![这是图片描述](这是图片链接)</code></pre>
<h3 id="1-2-html-语法"><a href="#1-2-html-语法" class="headerlink" title="1.2 html 语法"></a>1.2 html 语法</h3><pre><code class="html">&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/shw2018/cdn/master/blog_files/img/PicGo-Github-PicBed/2.png&quot; &gt;&lt;/p&gt;</code></pre>
<h2 id="2-插入音乐-以网易云音乐为例"><a href="#2-插入音乐-以网易云音乐为例" class="headerlink" title="2. 插入音乐,以网易云音乐为例"></a>2. 插入音乐,以网易云音乐为例</h2><p>例1：</p>
<pre><code class="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=450 src=&quot;//music.163.com/outchain/player?type=0&amp;id=2737308121&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt;</code></pre>
<p>效果：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=2737308121&auto=1&height=430"></iframe>

<h2 id="3-几种文章内视频插入的方法"><a href="#3-几种文章内视频插入的方法" class="headerlink" title="3. 几种文章内视频插入的方法"></a>3. 几种文章内视频插入的方法</h2><p>例1：</p>
<pre><code class="html">&lt;video width=&quot;100%&quot; height=100% src=&quot;https://yanghexo.cn-bj.ufileos.com/github.mp4&quot; controls=&quot;controls&quot; poster=&quot;https://yanghexo.cn-bj.ufileos.com/github.jpg&quot; preload=&quot;auto&quot;&gt; &lt;/video&gt;</code></pre>
<p>效果：</p>
<p><video width="100%" height=100% src="https://yanghexo.cn-bj.ufileos.com/github.mp4" controls="controls" poster="https://yanghexo.cn-bj.ufileos.com/github.jpg" preload="auto"> </video></p>
<p>例二：<br>需要先装一个插件：<code>npm install hexo-tag-dplayer --save</code></p>
<pre><code>{% dplayer "url=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4" "addition=https://dplayer.daoapp.io/bilibili?aid=4157142" "api=https://api.prprpr.me/dplayer/" "pic=https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg" "id=9E2E3368B56CDBB4" "loop=yes" "theme=#FADFA3" "autoplay=false" "token=tokendemo" %} {% dplayer 'url=some.mp4' "id=someid" "api=https://api.prprpr.me/dplayer/" "addition=/some.json" 'code=player.on("loadstart",function(){console.log("loadstart")})' "autoplay" %}
</code></pre><p>效果：</p>
<p>例三：</p>
<p>iframe内嵌哔哩哔哩视频播放</p>
<pre><code class="html">&lt;iframe width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;//player.bilibili.com/player.html?aid=52012946&amp;cid=91055960&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt;
</code></pre>
<iframe width="100%" height="500px" src="//player.bilibili.com/player.html?aid=52012946&cid=91055960&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<hr>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td><em>autoplay</em></td>
<td>如果出现该属性，则视频在就绪后马上播放。</td>
</tr>
<tr>
<td>controls</td>
<td><em>controls</em></td>
<td>如果出现该属性，则向用户显示控件，比如播放按钮。</td>
</tr>
<tr>
<td>width</td>
<td><em>pixels</em></td>
<td>设置视频播放器的宽度。</td>
</tr>
<tr>
<td>height</td>
<td><em>pixels</em></td>
<td>设置视频播放器的高度。</td>
</tr>
<tr>
<td>loop</td>
<td><em>loop</em></td>
<td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td>
</tr>
<tr>
<td>multed</td>
<td>_multed</td>
<td>如果出现该属性，视频的音频输出为静音。</td>
</tr>
<tr>
<td>poster</td>
<td><em>URL</em></td>
<td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td>
</tr>
<tr>
<td>srv</td>
<td><em>URL</em></td>
<td>要播放的视频的 URL。</td>
</tr>
<tr>
<td>preload</td>
<td><em>auto metadata none</em></td>
<td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td>
</tr>
</tbody></table>
<ul>
<li>例子：</li>
</ul>
<pre><code>$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $
</code></pre><p>显示：<br>$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $</p>
<ul>
<li>例子：</li>
</ul>
<pre><code class="mathematical">$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例
} $$
</code></pre>
<p>显示：<br>$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例<br>} $$</p>
<ul>
<li>例子：</li>
</ul>
<pre><code class="mathematical">$$ f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right) $$</code></pre>
<p>显示：<br>$$ f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right) $$</p>
<ul>
<li>例子：</li>
</ul>
<pre><code class="mathematical">$$\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}$$</code></pre>
<p>显示：<br>$$\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}$$</p>
<p>例子：</p>
<pre><code class="mathematical">$$f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm cdots} + x_n^2$$</code></pre>
<p>显示：<br>$$f(x_1,x_2,\underbrace{\ldots}<em>{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}</em>{\rm cdots} + x_n^2$$</p>
<p>例子：</p>
<pre><code class="mathematical">$$
d = \sqrt{(x_2-x_1)^2+(y_2-y_1)^2},|X|=\sqrt{x_2^2+y_2^2}.
$$</code></pre>
<p>显示：</p>
<p>$$<br>d = \sqrt{(x_2-x_1)^2+(y_2-y_1)^2},|X|=\sqrt{x_2^2+y_2^2}.<br>$$</p>
<p>例子：</p>
<pre><code class="mathematical">$$
d = \sqrt{(x_2-x_1)^2+(y_2-y_1)^2+(z_2-z_1)^2},|X|=\sqrt{x_2^2+y_2^2+z_2^2}.
$$</code></pre>
<p>显示：<br>$$<br>d = \sqrt{(x_2-x_1)^2+(y_2-y_1)^2+(z_2-z_1)^2},|X|=\sqrt{x_2^2+y_2^2+z_2^2}.<br>$$</p>
]]></content>
      <tags>
        <tag>Markdown</tag>
        <tag>写作</tag>
      </tags>
  </entry>
</search>
